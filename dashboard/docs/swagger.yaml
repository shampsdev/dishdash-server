definitions:
  domain.Coordinate:
    properties:
      lat:
        type: number
      lon:
        type: number
    type: object
  domain.Place:
    properties:
      address:
        type: string
      boost:
        type: number
      boostRadius:
        type: number
      description:
        type: string
      id:
        type: integer
      images:
        items:
          type: string
        type: array
      location:
        $ref: '#/definitions/domain.Coordinate'
      priceAvg:
        type: integer
      reviewCount:
        type: integer
      reviewRating:
        type: number
      shortDescription:
        type: string
      source:
        type: string
      tags:
        items:
          $ref: '#/definitions/domain.Tag'
        type: array
      title:
        type: string
      updatedAt:
        type: string
      url:
        type: string
    type: object
  domain.Tag:
    properties:
      icon:
        type: string
      id:
        type: integer
      name:
        type: string
      order:
        type: integer
      visible:
        type: boolean
    type: object
  pkg_gateways_http_image.UploadResponse:
    properties:
      url:
        type: string
    type: object
  pkg_gateways_http_image.uploadByURLRequest:
    properties:
      directory:
        type: string
      url:
        type: string
    type: object
  usecase.SavePlaceInput:
    properties:
      address:
        type: string
      boost:
        type: number
      boostRadius:
        type: number
      description:
        type: string
      images:
        items:
          type: string
        type: array
      location:
        $ref: '#/definitions/domain.Coordinate'
      priceMin:
        type: integer
      reviewCount:
        type: integer
      reviewRating:
        type: number
      shortDescription:
        type: string
      source:
        type: string
      tags:
        items:
          type: integer
        type: array
      title:
        type: string
      url:
        type: string
    type: object
  usecase.UpdatePlaceInput:
    properties:
      address:
        type: string
      boost:
        type: number
      boostRadius:
        type: number
      description:
        type: string
      id:
        type: integer
      images:
        items:
          type: string
        type: array
      location:
        $ref: '#/definitions/domain.Coordinate'
      priceMin:
        type: integer
      reviewCount:
        type: integer
      reviewRating:
        type: number
      shortDescription:
        type: string
      source:
        type: string
      tags:
        items:
          type: integer
        type: array
      title:
        type: string
      url:
        type: string
    type: object
info:
  contact: {}
  description: Manage places
  title: DishDash Dashboard
  version: "1.0"
paths:
  /images/upload/by_file:
    post:
      consumes:
      - application/json
      parameters:
      - description: Image data
        in: formData
        name: file
        required: true
        type: file
      - description: Directory in s3 storage
        in: query
        name: dir
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: A url to the stored image
          schema:
            $ref: '#/definitions/pkg_gateways_http_image.UploadResponse'
        "400":
          description: Parsing error
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Upload file to s3
      tags:
      - images
  /images/upload/by_url:
    post:
      consumes:
      - application/json
      description: UploadByURL a image by url to s3
      parameters:
      - description: URL and directory in s3 storage
        in: body
        name: uploadByURLRequest
        required: true
        schema:
          $ref: '#/definitions/pkg_gateways_http_image.uploadByURLRequest'
      produces:
      - application/json
      responses:
        "200":
          description: A url to the stored image
          schema:
            $ref: '#/definitions/pkg_gateways_http_image.UploadResponse'
        "400":
          description: Parsing error
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: UploadByURL a image by url to s3
      tags:
      - images
  /place/by_url:
    get:
      consumes:
      - application/json
      description: Get a place from the database by url
      parameters:
      - description: place url
        in: query
        name: url
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: place data
          schema: {}
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get place by url
      tags:
      - places
  /places:
    get:
      consumes:
      - application/json
      description: Get a list of places from the database
      produces:
      - application/json
      responses:
        "200":
          description: List of places
          schema:
            items:
              $ref: '#/definitions/domain.Place'
            type: array
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get places
      tags:
      - places
    patch:
      consumes:
      - application/json
      parameters:
      - description: Place data
        in: body
        name: place
        required: true
        schema:
          $ref: '#/definitions/usecase.UpdatePlaceInput'
      produces:
      - application/json
      responses:
        "200":
          description: Patched place
          schema:
            $ref: '#/definitions/domain.Place'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Patch a place
      tags:
      - places
    post:
      consumes:
      - application/json
      description: Create a new place in the database
      parameters:
      - description: Place data
        in: body
        name: place
        required: true
        schema:
          $ref: '#/definitions/usecase.SavePlaceInput'
      produces:
      - application/json
      responses:
        "200":
          description: Saved place
          schema:
            $ref: '#/definitions/domain.Place'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Create a place
      tags:
      - places
    put:
      consumes:
      - application/json
      description: Update a place with same id in the database
      parameters:
      - description: Place data
        in: body
        name: place
        required: true
        schema:
          $ref: '#/definitions/usecase.UpdatePlaceInput'
      produces:
      - application/json
      responses:
        "200":
          description: Updated place
          schema:
            $ref: '#/definitions/domain.Place'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Update a place
      tags:
      - places
  /places/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a place with same id in the database
      parameters:
      - description: Place ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Delete a place
      tags:
      - places
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: X-API-Token
    type: apiKey
swagger: "2.0"
